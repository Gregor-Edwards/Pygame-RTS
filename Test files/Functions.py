#Menus for the Computer Science project
#Purpose: To act as the logic for the menus when the game is fist loaded and other functions whilst the game is running!
#Created 30.08.2020 by Greg
#----------------------------------------------------------
import sqlite3
import socket
import pygame
import os
#import pickle

def Create_Database():#Create a database if it hasn't already been created and insert all of the achievements and settings etc. if they are not inserted into the database yet

    db=sqlite3.connect("Game_Database")#Ensures a new file is used
    db.close()
    os.remove("Game_Database")
    db=sqlite3.connect("Game_Database")
        
    cursor=db.cursor()

    #Create the database
    #------------------------------------------
    try:
        cursor.execute('''
        CREATE TABLE Achievement(AchievementID INTEGER not NULL PRIMARY KEY unique,
        AchievementName TEXT not NULL,
        Progress TEXT not NULL,
        AchievementDescription TEXT not NULL)
        ''')
    except Exception:
        print("Achievement table already exists!")

    try:
        cursor.execute('''
        CREATE TABLE Map(MapID INTEGER not NULL PRIMARY KEY unique,
        MapName TEXT not NULL,
        MapSize TEXT not NULL,
        MapTiles BLOB not NULL) 
        ''')
    except Exception:
        print("Map table already exists!")

    try:
        cursor.execute('''
        CREATE TABLE Setting(SettingID INTEGER not NULL PRIMARY KEY unique,
        SettingName TEXT not NULL,
        SettingValue Text not NULL,
        SettingDescription TEXT not NULL) 
        ''')
    except Exception:
        print("Setting table already exists!")

    try:
        cursor.execute('''
        CREATE TABLE Building(BuildingID INTEGER not NULL PRIMARY KEY unique,
        BuildingName TEXT not NULL,
        BuildingStats TEXT not NULL,
        BuildingFaction int not NULL)
        ''')
    except Exception:
        print("Building table already exists!")

    try:
        cursor.execute('''
        CREATE TABLE Unit(UnitID INTEGER not NULL PRIMARY KEY unique,
        UnitName TEXT not NULL,
        UnitSize TEXT not NULL,
        UnitAnimations TEXT not NULL,
        UnitStats TEXT not NULL,
        InvalidTiles TEXT not NULL,
        UnitFunctions TEXT not NULL)
        ''')
    except Exception:
        print("Unit table already exists!")



    try:
        cursor.execute('''
        CREATE TABLE Animation(AnimationID INTEGER not NULL PRIMARY KEY unique,
        AnimationName TEXT not NULL,
        UnitID INTEGER,
        BuildingID INTEGER,
        FOREIGN KEY (UnitID) REFERENCES Unit(UnitID),
        FOREIGN KEY (BuildingID) REFERENCES Building(BuildingID)) 
        ''')
    except Exception:
        print("Animation table already exists!")
    #------------------------------------------

    #Insert the default records (This is ONLY to be done when creating the database for the first time!)
    #------------------------------------------
    cursor.execute('''
    INSERT INTO Achievement VALUES (1,
    "Defeat Units",
    "0/100",
    "Defeat enemy units whilst playing the game on any map")
    ''')


    cursor.execute('''
    INSERT INTO Map VALUES (1,
    "Map1",
    "1000,1000",
    "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,10,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.250,251,252,253,0,0,0,0,0,0,0,0,0,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249.0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49.50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99.100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149.150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199.200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249")
    ''')#[ [Frame1],[Frame2],[ [row1],[row2],...],...] Split with . etc.
    

    cursor.execute('''
    INSERT INTO Setting VALUES (1,
    "SCALE",
    "10",
    "Scales the gameplay in order to improve the frame-rate")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (2,
    "WIDTH",
    "50",
    "Defines the width of the screen when not in full screen mode")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (3,
    "HEIGHT",
    "50",
    "Defines the width of the screen when not in full screen mode")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (4,
    "FPS",
    "60",
    "Defines the speed at which the game will run")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (5,
    "MINI_MAP_SIZE",
    "4",
    "Scales how big the minimap will be on the screen")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (6,
    "INFO_BAR_SIZE",
    "4",
    "Scales how big the infobar will be on the screen")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (7,
    "MAX_CAMERA_SPEED",
    "5",
    "Caps the camera's movement speed at this value in a given direction")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (8,
    "Team_COLOUR_R",
    "0",
    "Used to create the team colour")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (9,
    "TEAM_COLOUR_G",
    "5",
    "Used to create the team colour")
    ''')

    cursor.execute('''
    INSERT INTO Setting VALUES (10,
    "TEAM_COLOUR_B",
    "5",
    "Used to create the team colour")
    ''')


    cursor.execute('''
    INSERT INTO Animation VALUES (1,
    "Toads",
    "1",
    "")
    ''')

    cursor.execute('''
    INSERT INTO Unit VALUES (0,
    "Builder",
    "5,5",
    "0,0,0,0,1,1,1,1.0,1,2,3,4,5,6,7.2,2,2,2,3,3,3,3.4,4,4,4,4,4,4,4.5,5,5,5,5,5,5,5",
    "100,25,30,5,1,200,2,100,0",
    "1,2,3,4,5",
    "0,1,2,3,4")
    ''')#Functions: [0,1,2,3,4,...] Move, Patrol, Level up, self-destruct, Build, ...
    
    db.commit()#saves the created records to the database!
    #------------------------------------------

    #Get the records and return them
    #------------------------------------------
    cursor.execute('''
    SELECT * FROM Achievement
    ''')
    Output0=cursor.fetchall()
    #print(Output0)

    cursor.execute('''
    SELECT * FROM Map
    ''')
    Output1=cursor.fetchall()
    #print(Output1)

    cursor.execute('''
    SELECT * FROM Setting
    ''')
    Output2=cursor.fetchall()
    #print(Output2)

    cursor.execute('''
    SELECT * FROM Building
    ''')
    Output3=cursor.fetchall()
    #print(Output3)

    cursor.execute('''
    SELECT * FROM Unit
    ''')
    Output4=cursor.fetchall()
    #print(Output4)


    cursor.execute('''
    SELECT * FROM Animation
    ''')
    Output5=cursor.fetchall()
    #print(Output5)

    Outputs=[Output0,Output1,Output2,Output3,Output4,Output5]
    for x in range(len(Outputs)):
        for y in range(len(Outputs[x])):
            Outputs[x][y]=list(Outputs[x][y])
            #print(list(Outputs[x][y]))
    db.close()
    return Outputs
    #------------------------------------------

#----------------------------------------------------------

#----------------------------------------------------------
def Update_Database(Lists,TABLE_COLUMNS):#Update the database depending on the user's chosen settings and current progress towards achievements. This will be done WHENEVER closing the program!
    db=sqlite3.connect("Game_Database")
    cursor=db.cursor()
    for x in range(len(Lists)):#Each table
        for y in range(len(Lists[x])):#Each record
            String="UPDATE "+TABLE_COLUMNS[x][0]+" SET "
            for z in range(len(TABLE_COLUMNS[x][1:])):#Each column. The +1 is to start after the table name
                #print(Lists[x][y][z])
                try:
                    Lists[x][y][z]=int(Lists[x][y][z])#If an integer, then don't add ""'s
                    String=String+" "+TABLE_COLUMNS[x][z+1]+" = "+str(Lists[x][y][z])+","
                except Exception:#Otherwise, include ""'s
                    String=String+" "+TABLE_COLUMNS[x][z+1]+" = \""+str(Lists[x][y][z])+"\","

                if z == len(TABLE_COLUMNS[x][1:])-1:#On the last iteration, remove the comma
                    String=String[:len(String)-1]
            String=String+" WHERE "+TABLE_COLUMNS[x][1]+" = "+str(Lists[x][y][0])
            print(String)
            cursor.execute(String)
    db.commit()
#----------------------------------------------------------

print("Functions program...")

##TABLE_COLUMNS=[["Achievement","AchievementID","AchievementName", "Progress", "AchievementDescription"],["Map","MapID","MapName","MapSize"],["Setting","SettingID","SettingValue","SettingDescription"],["Building","BuildingID","BuildingName","BuildingStats","BuildingFaction"],["Unit","UnitID","UnitName","UnitStats","UnitFaction"],["Animation","AnimationID","AnimationName","UnitID","BuildingID"]]#Used when updating the database!
##
Lists=Create_Database()
print(Lists)
##Update_Database(Lists,TABLE_COLUMNS)
##print("HI!")
